{"ast":null,"code":"import { createStore } from 'redux';\nimport { combineReducers } from 'redux';\n\nconst updateWallet = (wallets, updatedWallet) => {\n  wallets.forEach(wlt => {\n    if (wlt.wallet_name === updatedWallet.wallet_name) {\n      wlt = updatedWallet;\n    }\n  });\n  return wallets;\n};\n\nfunction walletReducer(state = JSON.parse(localStorage.getItem('wallets')), action) {\n  switch (action.type) {\n    case 'SET_REDUX':\n      state = JSON.parse(localStorage.getItem('wallets'));\n      return state;\n\n    case 'ADD_WALLET':\n      state = JSON.parse(localStorage.getItem('wallets'));\n      state.wallets.push(action.payload);\n      localStorage.setItem('wallets', JSON.stringify(state));\n      state.wallets.pop(action.payload);\n      return {\n        wallets: [...state.wallets, action.payload]\n      };\n\n    case 'UPDATE_WALLET':\n      state = JSON.parse(localStorage.getItem('wallets'));\n      state = updateWallet(state.wallets, action.payload); //update localstorage and redux\n\n      return { ...state\n      };\n\n    case 'DELETE_WALLET':\n      state.wallets.forEach((wlt, index) => {\n        if (wlt.wallet_name === action.payload.wallet_name) {\n          state.wallets.splice(index, 1);\n        }\n      });\n      localStorage.setItem('wallets', JSON.stringify(state));\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  wallets: walletReducer\n});\nconst store = createStore(rootReducer);\nexport default store;","map":{"version":3,"sources":["/Users/LyaR/Desktop/alien-github/Alien-Tools/src/store.js"],"names":["createStore","combineReducers","updateWallet","wallets","updatedWallet","forEach","wlt","wallet_name","walletReducer","state","JSON","parse","localStorage","getItem","action","type","push","payload","setItem","stringify","pop","index","splice","rootReducer","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,aAAV,KAA4B;AAC7CD,EAAAA,OAAO,CAACE,OAAR,CAAgBC,GAAG,IAAI;AACnB,QAAIA,GAAG,CAACC,WAAJ,KAAoBH,aAAa,CAACG,WAAtC,EAAkD;AAC9CD,MAAAA,GAAG,GAAGF,aAAN;AACH;AACJ,GAJD;AAKA,SAAOD,OAAP;AACH,CAPD;;AASA,SAASK,aAAT,CAAuBC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAA/B,EAA4EC,MAA5E,EAAoF;AAChF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACIN,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAR;AACA,aAAOJ,KAAP;;AACJ,SAAK,YAAL;AACIA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAR;AACAJ,MAAAA,KAAK,CAACN,OAAN,CAAca,IAAd,CAAmBF,MAAM,CAACG,OAA1B;AACAL,MAAAA,YAAY,CAACM,OAAb,CAAqB,SAArB,EAAgCR,IAAI,CAACS,SAAL,CAAeV,KAAf,CAAhC;AACAA,MAAAA,KAAK,CAACN,OAAN,CAAciB,GAAd,CAAkBN,MAAM,CAACG,OAAzB;AACA,aAAO;AACHd,QAAAA,OAAO,EAAE,CAAC,GAAGM,KAAK,CAACN,OAAV,EAAmBW,MAAM,CAACG,OAA1B;AADN,OAAP;;AAGJ,SAAK,eAAL;AACIR,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAR;AACAJ,MAAAA,KAAK,GAAGP,YAAY,CAACO,KAAK,CAACN,OAAP,EAAgBW,MAAM,CAACG,OAAvB,CAApB,CAFJ,CAEyD;;AACrD,aAAO,EACH,GAAGR;AADA,OAAP;;AAIJ,SAAK,eAAL;AACIA,MAAAA,KAAK,CAACN,OAAN,CAAcE,OAAd,CAAsB,CAACC,GAAD,EAAMe,KAAN,KAAgB;AAClC,YAAIf,GAAG,CAACC,WAAJ,KAAoBO,MAAM,CAACG,OAAP,CAAeV,WAAvC,EAAoD;AAChDE,UAAAA,KAAK,CAACN,OAAN,CAAcmB,MAAd,CAAqBD,KAArB,EAA4B,CAA5B;AACH;AACJ,OAJD;AAKAT,MAAAA,YAAY,CAACM,OAAb,CAAqB,SAArB,EAAgCR,IAAI,CAACS,SAAL,CAAeV,KAAf,CAAhC;AACA,aAAO,EACH,GAAGA;AADA,OAAP;;AAGJ;AACI,aAAOA,KAAP;AA9BR;AAgCH;;AAED,MAAMc,WAAW,GAAGtB,eAAe,CAAC;AAChCE,EAAAA,OAAO,EAAEK;AADuB,CAAD,CAAnC;AAIA,MAAMgB,KAAK,GAAGxB,WAAW,CAACuB,WAAD,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { combineReducers } from 'redux';\n\nconst updateWallet = (wallets, updatedWallet) => {\n    wallets.forEach(wlt => {\n        if (wlt.wallet_name === updatedWallet.wallet_name){\n            wlt = updatedWallet;\n        }\n    })\n    return wallets;\n}\n\nfunction walletReducer(state = JSON.parse(localStorage.getItem('wallets')), action) {\n    switch (action.type) {\n        case 'SET_REDUX':\n            state = JSON.parse(localStorage.getItem('wallets'));\n            return state;\n        case 'ADD_WALLET':\n            state = JSON.parse(localStorage.getItem('wallets'))\n            state.wallets.push(action.payload);\n            localStorage.setItem('wallets', JSON.stringify(state));\n            state.wallets.pop(action.payload);\n            return {\n                wallets: [...state.wallets, action.payload]\n            };\n        case 'UPDATE_WALLET':\n            state = JSON.parse(localStorage.getItem('wallets'))\n            state = updateWallet(state.wallets, action.payload); //update localstorage and redux\n            return {\n                ...state\n            };\n\n        case 'DELETE_WALLET':\n            state.wallets.forEach((wlt, index) => {\n                if (wlt.wallet_name === action.payload.wallet_name) {\n                    state.wallets.splice(index, 1);\n                }\n            })\n            localStorage.setItem('wallets', JSON.stringify(state));\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    wallets: walletReducer,\n})\n\nconst store = createStore(rootReducer);\n\nexport default store;\n\n"]},"metadata":{},"sourceType":"module"}