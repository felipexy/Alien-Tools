{"ast":null,"code":"import { createStore } from 'redux';\nimport { combineReducers } from 'redux';\nstate.wallets.forEach((wlt, index) => {\n  var revisited = [];\n\n  if (wlt.wallet_name !== action.payload.wallet_name) {\n    state.wallets.splice(index, 1);\n    indexToInsert = index;\n  }\n\n  return;\n});\n\nfunction walletReducer(state = JSON.parse(localStorage.getItem('wallets')), action) {\n  switch (action.type) {\n    case 'ADD_WALLET':\n      state = JSON.parse(localStorage.getItem('wallets'));\n      state.wallets.push(action.payload);\n      localStorage.setItem('wallets', JSON.stringify(state));\n      state.wallets.pop(action.payload);\n      return {\n        wallets: [...state.wallets, action.payload]\n      };\n\n    case 'DELETE_WALLET':\n      debugger;\n      var indexToInsert = 0;\n      state.wallets.forEach((wlt, index) => {\n        if (wlt.wallet_name !== action.payload.wallet_name) {\n          state.wallets.splice(index, 1);\n          indexToInsert = index;\n        }\n      });\n      localStorage.setItem('wallets', JSON.stringify(state));\n      return state.wallets.splice(indexToInsert, 1);\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  wallets: walletReducer\n});\nconst store = createStore(rootReducer);\nexport default store;","map":{"version":3,"sources":["/Users/LyaR/Desktop/alien-github/Alien-Tools/src/store.js"],"names":["createStore","combineReducers","state","wallets","forEach","wlt","index","revisited","wallet_name","action","payload","splice","indexToInsert","walletReducer","JSON","parse","localStorage","getItem","type","push","setItem","stringify","pop","rootReducer","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEAC,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClC,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAIF,GAAG,CAACG,WAAJ,KAAoBC,MAAM,CAACC,OAAP,CAAeF,WAAvC,EAAoD;AAChDN,IAAAA,KAAK,CAACC,OAAN,CAAcQ,MAAd,CAAqBL,KAArB,EAA4B,CAA5B;AACAM,IAAAA,aAAa,GAAGN,KAAhB;AACH;;AACD;AACH,CAPD;;AASA,SAASO,aAAT,CAAuBX,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAA/B,EAA4ER,MAA5E,EAAoF;AAChF,UAAQA,MAAM,CAACS,IAAf;AACI,SAAK,YAAL;AACIhB,MAAAA,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAR;AACAf,MAAAA,KAAK,CAACC,OAAN,CAAcgB,IAAd,CAAmBV,MAAM,CAACC,OAA1B;AACAM,MAAAA,YAAY,CAACI,OAAb,CAAqB,SAArB,EAAgCN,IAAI,CAACO,SAAL,CAAenB,KAAf,CAAhC;AACAA,MAAAA,KAAK,CAACC,OAAN,CAAcmB,GAAd,CAAkBb,MAAM,CAACC,OAAzB;AACA,aAAO;AACHP,QAAAA,OAAO,EAAE,CAAC,GAAGD,KAAK,CAACC,OAAV,EAAmBM,MAAM,CAACC,OAA1B;AADN,OAAP;;AAGJ,SAAK,eAAL;AACI;AACA,UAAIE,aAAa,GAAG,CAApB;AACAV,MAAAA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClC,YAAID,GAAG,CAACG,WAAJ,KAAoBC,MAAM,CAACC,OAAP,CAAeF,WAAvC,EAAoD;AAChDN,UAAAA,KAAK,CAACC,OAAN,CAAcQ,MAAd,CAAqBL,KAArB,EAA4B,CAA5B;AACAM,UAAAA,aAAa,GAAGN,KAAhB;AACH;AACJ,OALD;AAMAU,MAAAA,YAAY,CAACI,OAAb,CAAqB,SAArB,EAAgCN,IAAI,CAACO,SAAL,CAAenB,KAAf,CAAhC;AACA,aAAOA,KAAK,CAACC,OAAN,CAAcQ,MAAd,CAAqBC,aAArB,EAAoC,CAApC,CAAP;;AACJ;AACI,aAAOV,KAAP;AArBR;AAuBH;;AAED,MAAMqB,WAAW,GAAGtB,eAAe,CAAC;AAChCE,EAAAA,OAAO,EAAEU;AADuB,CAAD,CAAnC;AAIA,MAAMW,KAAK,GAAGxB,WAAW,CAACuB,WAAD,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { combineReducers } from 'redux';\n\nstate.wallets.forEach((wlt, index) => {\n    var revisited = [];\n    if (wlt.wallet_name !== action.payload.wallet_name) {\n        state.wallets.splice(index, 1);\n        indexToInsert = index;\n    }\n    return \n})\n\nfunction walletReducer(state = JSON.parse(localStorage.getItem('wallets')), action) {\n    switch (action.type) {\n        case 'ADD_WALLET':\n            state = JSON.parse(localStorage.getItem('wallets'))\n            state.wallets.push(action.payload);\n            localStorage.setItem('wallets', JSON.stringify(state));\n            state.wallets.pop(action.payload);\n            return {\n                wallets: [...state.wallets, action.payload]\n            };\n        case 'DELETE_WALLET':\n            debugger\n            var indexToInsert = 0;\n            state.wallets.forEach((wlt, index) => {\n                if (wlt.wallet_name !== action.payload.wallet_name) {\n                    state.wallets.splice(index, 1);\n                    indexToInsert = index;\n                }\n            })\n            localStorage.setItem('wallets', JSON.stringify(state));\n            return state.wallets.splice(indexToInsert, 1);\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    wallets: walletReducer,\n})\n\nconst store = createStore(rootReducer);\n\nexport default store;\n\n"]},"metadata":{},"sourceType":"module"}